<template>
  <label wx:if="{{label!==null}}" style="{{'width:'+labelWidth}}">
    {{label}}
  </label>
  <view bindtap="onOpenModal" class="data-view">
    <text wx:for="{{value}}" wx:key="{{item.id}}">{{item.label}}</text>
  </view>
  <sh-modal title="{{title}}" visible="{{modalVisible}}" bind:onConfirm="setDateValue">
    <view slot="modal-body">
      <picker-view indicator-style="height: 50rpx;" class="picker-view" value="{{selectArray}}"
                   bindchange="onChange">
        <picker-view-column wx:for="{{pickerColumnArray}}" wx:for-item="column" wx:for-index="idx" wx:key="idx">
          <view wx:for="{{column}}" class="picker-view-column" wx:key="{{item.id}}">{{item.label}}</view>
        </picker-view-column>
      </picker-view>
    </view>
  </sh-modal>
</template>

<script>
export default {
    config: {
        usingComponents: {
            'sh-modal': '@showings-min/sh-modal'
        }
    },
    behaviors: ['wx://form-field'],
    properties: {
        name: String,
        value: {
            type: Array,
            value: [
                {
                    id: 0,
                    label: '请选择'
                }
            ]
        },
        label: {
            type: String,
            value: null
        },
        labelWidth: {
            type: String,
            value: '120rpx'
        },
        title: {
            type: String,
            value: null
        },
        options: {
            type: Array,
            value: []
        }

    },
    data: {
        modalVisible: false,
        pickerColumnArray: [],
        selectArray: [0]
    },
    methods: {
        onOpenModal () {
            let temp = this.data.options.map(item => {
                return {
                    id: item.id,
                    label: item.label
                }
            })
            temp.splice(0, 0, {id: -1, label: '请选择', children: []})
            this.setData({
                modalVisible: true,
                pickerColumnArray: [temp],
                selectArray: [0]
            })
        },
        onChange ({detail}) {
            const {value} = detail
            let newPickerColumns = []
            let newSelectArray = []
            for (let i = 0; i < value.length; i++) {
                newPickerColumns.push(this.data.pickerColumnArray[i])
                newSelectArray.push(value[i])
                if (this.data.selectArray[i] !== value[i]) {
                    let temp = this.data.options.concat()
                    newSelectArray.forEach(idx => {
                        if (temp[idx - 1] === undefined) {
                            temp = undefined
                        } else {
                            temp = temp[idx - 1].children !== undefined ? temp[idx - 1].children.concat() : undefined
                        }
                    })
                    if (temp !== undefined) {
                        temp.splice(0, 0, {id: -1, label: '请选择', children: []})
                        newPickerColumns.push(temp)
                        newSelectArray.push(0)
                    }
                    break
                }
            }
            this.setData({
                selectArray: newSelectArray,
                pickerColumnArray: newPickerColumns
            })
        },
        setDateValue () {
            let value = []
            let temp = this.data.options
            for (let i = 0; i < this.data.selectArray.length; i++) {
                if (this.data.selectArray[i] === 0) {
                    break
                }
                let {id, label, children} = temp[this.data.selectArray[i] - 1]
                value.push({id: id, label: label})
                temp = children
            }
            if(value.length<=0){
                value.push({id: -1, label: '请选择', children: []})
            }
            this.setData({
                value: value
            })
            this.triggerEvent('onConfirm', {value: this.data.value})
        }
    }
}


</script>

<style>
  sh-cascader {
    display: flex;
    position: relative;
    align-items: center;
    width: 100%;
    padding: 15px 30px;
    box-sizing: border-box;
    background-color: #fff;
  }

  sh-cascader:before {
    content: " ";
    position: absolute;
    top: 0;
    right: 0;
    height: 1px;
    border-top: 1px solid #D9D9D9;
    color: #D9D9D9;
    -webkit-transform-origin: 0 0;
    transform-origin: 0 0;
    -webkit-transform: scaleY(0.5);
    transform: scaleY(0.5);
    left: 30px;
  }

  sh-cascader label {
    margin-right: 25px;
    font-size: 25px;
    text-align: right;
  }

  .picker-view {
    width: 100%;
    height: 300px;
  }

  .picker-view-column {
    line-height: 60px;
  }

  .data-view {
    font-size: 25px;
    flex-grow: 1;
  }

  .data-view text {
    margin-right: 15px;
  }

  form sh-form sh-cascader:first-child:before,
  sh-form sh-cascader:first-child:before {
    display: none;
  }
</style>
